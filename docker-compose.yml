---
volumes:
  postgres_data:
    driver: local
    name: MemberMGR_Volume
  grafana_data:
    driver: local
    name: MemberMGR_Grafana_Volume

networks:
  default:
    name: ${APP_NETWORK}
    driver: bridge
  monitoring:
    name: ${APP_NETWORK}_monitoring
    driver: bridge

services:
  postgres:
    image: postgres:${POSTGRES_VERSION}
    container_name: ${APP_NAME}_postgres_db
    restart: always
    env_file:
      - .env
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test:
        ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  api:
    image: ${APP_NAME}_api
    build:
      context: ./app
      dockerfile: Dockerfile
    container_name: ${APP_NAME}_api
    restart: always
    environment:
      - RUNNING_IN_DOCKER=True
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@${POSTGRES_HOST}:${POSTGRES_PORT}/${POSTGRES_DB}
    networks:
      - default
      - monitoring
    ports:
      - "${API_PORT}:8000"
    volumes:
      - ./app/seed:/app/seed
      - ./app/pdf/templates:/app/pdf/templates
      - ./output:/app/output
    depends_on:
      postgres:
        condition: service_healthy

  pgadmin:
    image: dpage/pgadmin4
    container_name: ${APP_NAME}_prom_pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
    ports:
      - "${PGADMIN_PORT}:80"
    depends_on:
      postgres:
        condition: service_healthy

  prometheus:
    image: prom/prometheus
    container_name: ${APP_NAME}_prom_prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/prometheus/rules:/etc/prometheus/rules
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.enable-lifecycle"
    ports:
      - "9090:9090"
    networks:
      - monitoring
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --spider -q http://localhost:9090/-/healthy || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 5

  grafana:
    image: grafana/grafana
    container_name: ${APP_NAME}_prom_grafana
    restart: unless-stopped
    networks:
      - monitoring
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning/dashboards/dashboards.yml:/etc/grafana/provisioning/dashboards/dashboards.yml
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5

  loki:
    image: grafana/loki:2.9.0
    container_name: ${APP_NAME}_prom_loki
    restart: unless-stopped
    networks:
      - monitoring
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    healthcheck:
      test: ["CMD-SHELL", "wget --spider http://localhost:3100/ready || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  postgres-exporter:
    image: prometheuscommunity/postgres-exporter
    container_name: ${APP_NAME}_prom_postgres_exporter
    restart: unless-stopped
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}?sslmode=disable"
    networks:
      - monitoring
    ports:
      - "9187:9187"
    depends_on:
      - postgres
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget -q --spider http://localhost:9187/metrics || exit 1",
        ]
      interval: 10s
      timeout: 5s
      retries: 5

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.47.0
    container_name: ${APP_NAME}_prom_cadvisor
    restart: unless-stopped
    networks:
      - monitoring
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget -q --spider http://localhost:8080/healthz || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 5

  promtail:
    image: grafana/promtail:2.9.0
    container_name: ${APP_NAME}_prom_promtail
    restart: unless-stopped
    networks:
      - monitoring
    ports:
      - "9080:9080"
    volumes:
      - /mnt/archive_lionel/archive/____DOCKER-DATA____/containers:/var/lib/docker/containers:ro
      - ./monitoring/promtail-config.yml:/etc/promtail/promtail.yml
    command: -config.file=/etc/promtail/promtail.yml
    depends_on:
      - loki

  node-exporter:
    image: prom/node-exporter:latest
    container_name: ${APP_NAME}_prom_node_exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($|/)"
    networks:
      - monitoring
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget -q --spider http://localhost:9100/metrics || exit 1",
        ]
      interval: 30s
      timeout: 10s
      retries: 5

  alertmanager:
    image: prom/alertmanager:latest
    container_name: ${APP_NAME}_prom_alertmanager
    volumes:
      - ./monitoring/alertmanager:/etc/alertmanager
    command:
      - "--config.file=/etc/alertmanager/config.yml"
      - "--storage.path=/alertmanager"
    networks:
      - monitoring
    ports:
      - "9093:9093"
    restart: unless-stopped
