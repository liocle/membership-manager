---
# .github/workflows/ci.yml
name: CI

on:
  push:
    branches: [main]
  pull_request:

env:
  POSTGRES_USER: admin
  POSTGRES_PASSWORD: changeme
  POSTGRES_VERSION: 16
  PYTHON_VERSION: 3.11

jobs:
  schema:
    name: Validate SQL schema
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: members_db
        ports: [5432:5432]
        options: >-
          --health-cmd "pg_isready -U ${{ env.POSTGRES_USER }}"
          --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v4
      - name: Apply DDL
        run: |
          PGPASSWORD=${{ env.POSTGRES_PASSWORD }} \
            psql -h localhost -U ${{ env.POSTGRES_USER }} \
            -d members_db -f postgres/init/init.sql
      - name: Assert tables exist
        run: |
          PGPASSWORD=${{ env.POSTGRES_PASSWORD }} \
            psql -h localhost -U ${{ env.POSTGRES_USER }} \
            -d members_db \
            -tAc "SELECT COUNT(*) FROM information_schema.tables WHERE table_name='members';" \
            | grep -qx 1

  tests:
    name: Python tests & coverage
    needs: schema
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: members_test_db
        ports: [5432:5432]
        options: >-
          --health-cmd "pg_isready -U ${{ env.POSTGRES_USER }}"
          --health-interval 10s --health-timeout 5s --health-retries 5

    env:
      ENV_FILE: .env.test
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with: python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r app/requirements.txt
          pip install sqlalchemy-utils pytest pytest-asyncio pytest-cov ruff black
      - name: Prepare test database
        run: python tests/setup_test_db.py
      - name: Run tests & coverage
        run: pytest tests/ --cov=app --cov-report=xml
      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml

