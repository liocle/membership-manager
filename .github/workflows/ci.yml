---
# .github/workflows/ci.yml
name: CI

on:
  workflow_dispatch: {}  # Allows manual triggering of the workflow
  push:
    branches: [main]
  pull_request: {}

jobs:
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest

    env:
      PYTHON_VERSION: ${{ vars.PYTHON_VERSION }}

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install linters
        run: |
          python -m pip install --upgrade pip
          pip install ruff black
      - name: Run Ruff
        run: ruff check app tests
      - name: Run Black (check only)
        run: black --check app tests

  tests:
    name: Python Tests & Coverage
    needs: lint
    runs-on: ubuntu-latest

    env:
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
      POSTGRES_HOST: localhost
      POSTGRES_PORT: ${{ vars.POSTGRES_PORT }}
      PYTHON_VERSION: ${{ vars.PYTHON_VERSION }}
      POSTGRES_VERSION: ${{ vars.POSTGRES_VERSION }}

    services:
      postgres:
        image: postgres:${{ env.POSTGRES_VERSION }}
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        ports: ["${{ env.POSTGRES_PORT }}:5432"]
        options: >-
          --health-cmd "pg_isready -U ${{ env.POSTGRES_USER }}"
          --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r app/requirements.txt
          pip install sqlalchemy-utils pytest pytest-asyncio \
            pytest-cov ruff black
      - name: Prepare test database
        run: python tests/setup_test_db.py
      - name: Run tests & coverage
        run: pytest tests/ --cov=app --cov-report=xml
      - name: Upload coverage report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml

